clear

%% VALORES INICIALES INTEGRACIÓN DEL MODELO
    %% KPC
    % initial values
    x0 = complex([100, 2, 0, 0, 0, 0, 0], 0); 
    % step size and time interval in days
    d = 1.0e-16; 
    tspan = 0.0:0.05:700;
    % k1 = p[1] = kon,  k3 = p[2], kmenos1 = p[3], w = p[4], k2 = p[5], kmenos2 = p[6]
    p = complex([10, 1, 0.1, 1, 1, 10], 0);
    solution = sensitivity(x0, p, d, tspan); 

    % --------------- KOFF -----------------------------
% Vector de valores de koff
koffVect = 0.001:0.001:1;

% Resultados con el número de filas de koff y en cada columna el instante
% temporal
results_matrix = zeros(length(koffVect), length(solution{4}(:, 1))); 
for i = 1:length(koffVect)

    p = complex([10, 1, koffVect(i), 1, 1, 10], 0);

    solution = sensitivity(x0, p, d, tspan);

    % COJO LA RESPUESTA QUE ME INTERESA:
    SolResponse = solution{3}(:, 4); 
    % Normalización de la respuesta
    newSol = (SolResponse .* koffVect(i)) ./ solution{3}(:, 1); 

    % En la fila que define un valor de koff
    results_matrix(i, :) = newSol;
end

inferno = csvread('inferno_colormap.csv');
%inferno = flipud(inferno);
figure; 
% imagesc(tspan, koffVect, results_matrix); 
% results_matrix = log10(results_matrix); results_matrix = real(results_matrix); NO
%results_matrix = log10(abs(results_matrix));
imagesc(tspan, koffVect, results_matrix); 
colormap(inferno);
cb = colorbar;
cb.Label.String = 'Sensitivity';
xlabel('Time (s)');
ylabel('Dissociate rate (koff)');
title('KPC');
set(gca, 'YDir', 'normal');
hold on


%% SOLUCION

solution = sensitivity(x0, p, d, tspan); 

% solution{estado}(:, nºparametro)
NewSolR = solution{3}(:, 1);

figure
% Crear el gráfico
plot(tspan, NewSolR);
xlabel('t');
legend;
title('Sensitivity');

% % COMPROBACIÓN
% neg = @(t,y)ODEKPRmcK(t, y, p);
% options = odeset('RelTol',1e-6,'AbsTol',1e-9);
% [t,x] = ode45(neg, tspan, x0, options);
% plot(t, x(:,4), 'DisplayName', 'x1');



%% FUNCIONES
function solution = sensitivity(x0, p, d, tspan)

    KPC = @(t,y)ODEKPZU(t, y, p);
    options = odeset('RelTol',1e-6,'AbsTol',1e-9, 'Refine', 1);
    [t,x] = ode45(KPC, tspan, x0, options);
    
    lp = length(p); ls = size(x, 1); lx = length(x0);
    % Crea un array de celdas de 1 fila y lx columnas. Cada celda puede contener datos de cualquier tipo, en este caso, matrices de ceros.
    solution = cell(1, lx);
    % Para cada índice i, se asigna una matriz de ceros de tamaño ls x (lp + 1) a la celda solution{i
    for i = 1:lx
        solution{i} = zeros(ls, lp + 1);
    end
    % El bucle itera sobre cada especie j y almacena la solución correspondiente en la primera columna de la 
    % matriz solution[j] dentro del diccionario solution. La primera columna se utiliza para almacenar la solución original (sin perturbaciones en los parámetros).
    for j = 1:lx
        solution{j}(:, 1) = x(:, j);
    end

    for j = 1:lp
        % La técnica de diferencias finitas complejas implica agregar una pequeña perturbación imaginaria a un parámetro 
        % para calcular la derivada parcial de la solución con respecto a ese parámetro.
        p(j) = p(j) + d * 1i; % Perturba el parámetro
        
        options = odeset('RelTol',1e-6,'AbsTol',1e-9, 'Refine', 1);
        KPC = @(t,y)ODEKPZU(t, y, p);
        [t,x] = ode45(KPC, tspan, x0, options);
        
        % Está destinada a restablecer el parámetro p[j] a su valor original, eliminando cualquier componente imaginaria que se haya agregado durante el proceso de perturbación.
        p(j) = complex(real(p(j)), 0);
        %  Toma la parte imaginaria de cada elemento en sol, donde sol es la matriz de soluciones del sistema ODE después de 
        % perturbar el parámetro correspondiente con una pequeña cantidad imaginaria d * im.
        % Divide la parte imaginaria de sol por d. Esto proporciona una aproximación de la derivada parcial de la solución 
        % con respecto al parámetro perturbado, utilizando diferencias finitas complejas.
        xSens = imag(x) ./ d;
        
        % Selecciona todas las filas y la columna j + 1 de la matriz solution[k]. 
        % La columna j + 1 se utiliza para almacenar la sensibilidad respecto al parámetro p[j] (perturbado).
        % Selecciona la fila k de la matriz sol (x), que contiene las sensibilidades calculadas para la especie k en todos los tiempos de evaluación.
        for k = 1:lx
            solution{k}(:, j + 1) = xSens(:, k);
        end


    end

    

end

function dx = ODEKPZU(t, x, p)
    dx = zeros(8,1);
    % k1 = p(1); k3 = p(2); kmenos1 = p(3); w = p(4); k2 = p(5); kmenos2 =
    % p(6)
    dx(1) = -p(1) * x(1) * x(2) + p(2) * x(5) + p(3) * (x(6) + x(7) + x(8));     % T'(t)
    dx(2) = -p(1) * x(1) * x(2) + p(4) * x(8) + p(3) * (x(6) + x(7) + x(8));      % P'(t)
    dx(3) = p(4) * x(8) - p(5) * x(3) * x(4) + p(6) * x(5);                       % Tp'(t)
    dx(4) = -p(5) * x(3) * x(4) + p(6) * x(5) + p(2) * x(5);                     % Q'(t)
    dx(5) = p(5) * x(3) * x(4) - (p(6) + p(2)) * x(5);                           % D'(t)
    dx(6) = p(1) * x(1) * x(2) - (p(3) + p(4)) * x(6);                            % C0'(t)
    dx(7) = -p(3) * x(7) - p(4) * x(7) + p(4) * x(6);                              % C1'(t)
    dx(8) = -p(3) * x(8) - p(4) * x(8) + p(4) * x(7);                              % C2'(t)
end
