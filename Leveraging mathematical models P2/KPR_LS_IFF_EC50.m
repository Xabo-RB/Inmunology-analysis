%--------------------------------------------------------------------------
% KPR Limited Signaling IFF
% The model is taken from:
%--------------------------------------------------------------------------
% Lever, M., Lim, H. S., Kruger, P., Nguyen, J., Trendel, 2., Abu-Shah, E., ... & Dushek, O. (2016). 
% Architecture of a minimal signaling pathway explains the T-cell response to a 1 million-fold variation in antigen affinity and dose. 
% Proceedings of the National Academy of Sciences, 113(43), E6630-E6638.
%--------------------------------------------------------------------------

clear all;

syms kon koff kp phi gyp gym gpp gpm lambda Delta mu YT PT omega
p = [kon; koff; kp; phi; gyp; gym; gpp; gpm; lambda; Delta; mu; YT; PT; omega];

syms L R C0 C1 C2 C3 C4 C5 C6 Y P 
x = [L; R; C0; C1; C2; C3; C4; C5; C6; Y; P];

f = [
    -kon * L * R + koff * C0 + koff * C1 + koff * C2 + koff * C3 + koff * C4 + koff * C5 + koff * C6; % L'(t)
    -kon * L * R + koff * C0 + koff * C1 + koff * C2 + koff * C3 + koff * C4 + koff * C5 + koff * C6; % R'(t)
    kon * L * R - (koff + kp) * C0;                                  % C0'(t)
    kp * C0 - (koff + kp) * C1;                                % C1'(t)
    kp * C1 - (koff + kp) * C2;                                 % C2'(t)
    kp * C2 - (koff + kp) * C3;                                 % C3'(t)
    kp * C3 - (koff + kp) * C4;                                 % C4'(t)
    kp * C4 - (koff + phi) * C5;                                % C5'(t)
    phi * C5 - koff*C6;                                         % C6'(t) 
    gyp * (YT - Y) - gym * Y + lambda * C5 * (YT - Y);     % Y'(t)
    gpp * (PT - P) - gpm * P + Delta * Y * (PT - P) - mu * C5 * P % P'(t)
];

h = [-1/2*(((koff / (koff + phi)) * (kp / (koff + kp))^5)^3*(R+C0+C1+C2+C3+C4+C5+C6)*((koff/kon) + (R+C0+C1+C2+C3+C4+C5+C6))*lambda*mu*omega*...
         (-(PT*(gpp + YT*Delta)*lambda) + (gpm + gpp + YT*Delta)*...
           lambda*omega + (gym + gyp)*mu*omega) + ...
        ((koff / (koff + phi)) * (kp / (koff + kp))^5)*(gpp*(gym + gyp)*PT + gyp*PT*YT*Delta - ...
          ((gpm + gpp)*(gym + gyp) + gyp*YT*Delta)*omega)*...
         (PT*(gpp + YT*Delta)*lambda - ...
          ((gpm + gpp + YT*Delta)*lambda + (gym + gyp)*mu)*...
           omega) + ...
        sqrt((((koff / (koff + phi)) * (kp / (koff + kp))^5)*PT*(YT*Delta*(gyp + ((koff / (koff + phi)) * (kp / (koff + kp))^5)*(R+C0+C1+C2+C3+C4+C5+C6)*lambda) + gpp*(gym + gyp + ...
                ((koff / (koff + phi)) * (kp / (koff + kp))^5)*(R+C0+C1+C2+C3+C4+C5+C6)*lambda)) - ((koff / (koff + phi)) * (kp / (koff + kp))^5)*(YT*Delta*(gyp + ((koff / (koff + phi)) * (kp / (koff + kp))^5)*(R+C0+C1+C2+C3+C4+C5+C6)*lambda) + ...
              gpm*(gym + gyp + ((koff / (koff + phi)) * (kp / (koff + kp))^5)*(R+C0+C1+C2+C3+C4+C5+C6)*lambda) + gpp*(gym + gyp + ...
                ((koff / (koff + phi)) * (kp / (koff + kp))^5)*(R+C0+C1+C2+C3+C4+C5+C6)*lambda) + ((koff / (koff + phi)) * (kp / (koff + kp))^5)*(R+C0+C1+C2+C3+C4+C5+C6)*(gym + gyp + ((koff / (koff + phi)) * (kp / (koff + kp))^5)*((koff/kon) + (R+C0+C1+C2+C3+C4+C5+C6))*lambda)*...
               mu)*omega)^2*(PT^2*(gpp + YT*Delta)^2*...
            lambda^2 - 2*PT*lambda*((gpp + YT*Delta)*...
              (gpm + gpp + YT*Delta)*lambda - (gpp*(gym + gyp) + ...
               (-gym + gyp)*YT*Delta)*mu)*omega + ...
           ((gpm + gpp + YT*Delta)^2*lambda^2 - ...
             2*((gpm + gpp)*(gym + gyp) + (-gym + gyp)*YT*Delta)*lambda*...
              mu + (gym + gyp)^2*mu^2)*omega^2)) + ...
        ((koff / (koff + phi)) * (kp / (koff + kp))^5)^2*(PT^2*(R+C0+C1+C2+C3+C4+C5+C6)*(gpp + YT*Delta)^2*lambda^2 - ...
          2*PT*lambda*((R+C0+C1+C2+C3+C4+C5+C6)*(gpp + YT*Delta)*(gpm + gpp + YT*Delta)*...
             lambda + gpp*(gym + gyp)*((koff/kon) + (R+C0+C1+C2+C3+C4+C5+C6))*mu + ...
            (gym*(R+C0+C1+C2+C3+C4+C5+C6) + gyp*((koff/kon) + (R+C0+C1+C2+C3+C4+C5+C6)))*YT*Delta*mu)*omega + ...
          ((R+C0+C1+C2+C3+C4+C5+C6)*(gpm + gpp + YT*Delta)^2*lambda^2 + ...
            2*((gpm + gpp)*(gym + gyp)*((koff/kon) + (R+C0+C1+C2+C3+C4+C5+C6)) + (gym*(R+C0+C1+C2+C3+C4+C5+C6) + gyp*((koff/kon) + (R+C0+C1+C2+C3+C4+C5+C6)))*...
               YT*Delta)*lambda*mu + (gym + gyp)^2*(R+C0+C1+C2+C3+C4+C5+C6)*mu^2)*...
           omega^2))/(((koff / (koff + phi)) * (kp / (koff + kp))^5)^2*lambda*mu*omega*...
        (-(PT*YT*Delta*(gyp + ((koff / (koff + phi)) * (kp / (koff + kp))^5)*(R+C0+C1+C2+C3+C4+C5+C6)*lambda)) - ...
         gpp*(gym + gyp + ((koff / (koff + phi)) * (kp / (koff + kp))^5)*(R+C0+C1+C2+C3+C4+C5+C6)*lambda)*(PT - omega) + ...
         gpm*gym*omega + (gpm + YT*Delta)*(gyp + ((koff / (koff + phi)) * (kp / (koff + kp))^5)*(R+C0+C1+C2+C3+C4+C5+C6)*lambda)*...
          omega + ((koff / (koff + phi)) * (kp / (koff + kp))^5)*(R+C0+C1+C2+C3+C4+C5+C6)*(gym + gyp + ((koff / (koff + phi)) * (kp / (koff + kp))^5)*(R+C0+C1+C2+C3+C4+C5+C6)*lambda)*mu*...
          omega)), R];

%% initial conditions:
ics  = [];   

% which initial conditions are known:
known_ics = [0,0,0,0,0,0,0]; 

u = [];
w = [];
save('KPR_LS_IFF_EC50','x','p','u','w','h','f','ics','known_ics');
